---
import Layout from "../layouts/Layout.astro";
import streams from "../data/streams.json";

import ColumnSetting from "../components/ColumnSetting.astro";

const errors = { videos: "" };
if (Astro.request.method === "POST") {
  try {
    const data = await Astro.request.formData();
    const videos = data.get("videos");
    if (typeof videos !== "string" || videos.length < 6) {
      errors.videos += "Password must be at least 6 characters. ";
    }
  } catch (error) {
    if (error instanceof Error) {
      console.error(error.message);
    }
  }
}
---

<Layout
  title="ZEN MODE, an easy way to layout embedded content and share it with friends"
>
  <main class="content">
    
    <div class="custom-columns">

      {
        streams.map((stream) => {
          return (
            <div class="custom-column">
              <div class="youtube-wrapper">
                <iframe
                  class="youtube"
                  width="375"
                  height="300"
                  style="max-width:100%"
                  title="YouTube video player"
                  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
                  allowfullscreen
                />
              </div>
            </div>
          );
        })
      }
    </div>
    <div class="container">
      <p>More customization for this page is coming soon! If you want to attempt it yourself, edit the URL params above. <code>?cols=</code> Sets the number of flexbox columns (1 to 4) and <code>&vids=</code> are the youtube video IDs, separated by a comma. Currently the iframes are limited to 4, while I work on some testing.</p>
      <div class="columns">
        
        <!-- <div class="column">
          <ColumnSetting /> 
        </div>
        <div class="column">
          <form method="POST">
            <details>
              <summary>Video Links</summary>
              {
                streams.map((stream) => {
                  return (
                    <label for={stream.url}></label>
                    <input
                      class="input is-small"
                      type="text"
                      id={stream.url}
                      name={stream.url}
                      placeholder={stream.url}
                    /><button class="delete"></button><br /><br />
                  );
                })
              }

              <button class="delete"></button><br /><br />

              <input type="submit" value="Submit" />
            </details>
          </form>
        </div> -->
      </div>
    </div>

  </main>
</Layout>

<style>
  body {
    margin: 0;
  }
  .container{
    padding: 12px;
  }
  .custom-columns {
    display: flex;
    flex-wrap: wrap;
  }
  .custom-column {
    --element-width: 25%;
    width: var(--element-width, 100%);
    box-sizing: border-box;
  }
  @media (max-width: 768px) {
    .custom-column {
      width: 100%;
    }
  }
  main {
  }
  h1 {
    font-size: 3rem !important;
    font-weight: 800 !important;
    margin: 0;
  }
  .youtube-wrapper {
    position: relative;
    overflow: hidden;
    width: 100%;
    padding-top: 56.25%;
  }
  .youtube-wrapper iframe {
    position: absolute;
    top: 0;
    left: 0;
    bottom: 0;
    right: 0;
    width: 100%;
    height: 100%;
  }
  
</style>

<script>
  //Set width prop as URL param '?cols=2'
  const urlParams = new URLSearchParams(window.location.search);
  const cols = urlParams.get("cols");
  const vids = urlParams.get("vids");
  const width = 100 / cols;

  //Set .custom-column width based on the const width property
  const customColumns = document.querySelectorAll(".custom-column");
  customColumns.forEach((column) => {
    column.style.setProperty("--element-width", `${width}%`);
  });


  //Set default paths
  const defaultColumns = 2;
  const defaultVids = 
    ["https://www.youtube.com/watch?v=cxKOWn4Mys8", 
    "https://www.youtube.com/watch?v=MDiY0SeyfGw", 
    "https://www.youtube.com/watch?v=JJqXeRFsLjE",
    "https://www.youtube.com/watch?v=BahXDYWQAKk"]
  
  const defaultVidsCleaned = defaultVids.map((vid) => {
    return vid.replace("https://www.youtube.com/watch?v=", "");
  });

  //if URL params are not set, set them with some defaults
  if (!urlParams.has("cols")) {
    window.location.search = `?cols=${defaultColumns}&vids=${defaultVidsCleaned}`;
  }

  //Set array of video links from URL params
  const vidsArray = vids.split(",");
  console.log(vidsArray);

  //Prepend https://www.youtube.com/embed/ to each video link
  const vidsArrayFull = vidsArray.map((vid) => {
    return `https://www.youtube.com/embed/${vid}?autoplay=1&mute=1`;
  });

  //push vidsArrayFull to the DOM
  const vidsArrayFullPush = vidsArrayFull.map((vid) => {
    return `<iframe
                  class="youtube"
                  width="375"
                  height="300"
                  style="max-width:100%"
                  src=${vid}
                  title="YouTube video player"
                  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
                  allowfullscreen
                />`;
  });

  //Set the iframe src attribute to the new video link
  const youtube = document.querySelectorAll(".youtube");
  youtube.forEach((vid, index) => {
    vid.src = vidsArrayFull[index];
  });



  
  //If value changes for the select box input, update the columns
  const selectBox = document.querySelector("#columnSelectBox");
  selectBox.addEventListener("change", (event) => {
    const value = event.target.value;
    window.location.search = `?cols=${value}?vids=${defaultVidsCleaned}`;
  });



</script>
