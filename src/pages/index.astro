---
import Layout from "../layouts/Layout.astro";
import streams from "../data/streams.json";

import SettingsMenu from "../components/SettingsMenu.astro";
import Share from "../components/Share.astro";

async function handleFormRequest() {
  const errors = { videos: "" };
  try {
    const data = await Astro.request.formData();
    const videos = data.get("videos");
    if (typeof videos !== "string" || videos.length < 7) {
      errors.videos += "Video URLs must be valid. ";
    }
  } catch (error) {
    if (error instanceof Error) {
      console.error(error.message);
    }
  }
}

if (Astro.request.method === "POST") {
  await handleFormRequest();
}
---

<Layout
  title="ZEN MODE, an easy way to layout embedded content and share it with friends"
>
  <main class="content mb-0">
    --- import VideoSetting from "./VideoSetting.astro"; import ColumnSetting
    from "./ColumnSetting.astro"; // import Create from "./Create.astro"; ---

    <!-- drawer init and toggle -->
    <div class="text-center">
      <button
        id="settings-menu"
        class="text-white bg-white shadow-lg border-4 border-gray-400 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 mb-2 dark:bg-blue-700 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800"
        type="button"
        data-drawer-target="drawer-example"
        data-drawer-show="drawer-example"
        aria-controls="drawer-example"
      >
        <svg
          class="w-6 h-6 text-gray-800 dark:text-white"
          aria-hidden="true"
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 20 20"
        >
          <path
            stroke="currentColor"
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M7.75 4H19M7.75 4a2.25 2.25 0 0 1-4.5 0m4.5 0a2.25 2.25 0 0 0-4.5 0M1 4h2.25m13.5 6H19m-2.25 0a2.25 2.25 0 0 1-4.5 0m4.5 0a2.25 2.25 0 0 0-4.5 0M1 10h11.25m-4.5 6H19M7.75 16a2.25 2.25 0 0 1-4.5 0m4.5 0a2.25 2.25 0 0 0-4.5 0M1 16h2.25"
          ></path>
        </svg>
      </button>
    </div>

    <!-- drawer component -->
    <div
      id="drawer-example"
      class="shadow fixed top-0 left-0 z-40 h-screen p-4 overflow-y-auto transition-transform -translate-x-full bg-white w-80 dark:bg-gray-800"
      tabindex="-1"
      aria-labelledby="drawer-label"
    >
      <h5
        id="drawer-label"
        class="mb-2 text-3xl font-extrabold tracking-tight text-gray-900 dark:text-white"
      >
        Settings
      </h5>
      <button
        type="button"
        data-drawer-hide="drawer-example"
        aria-controls="drawer-example"
        class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 absolute top-2.5 end-2.5 flex items-center justify-center dark:hover:bg-gray-600 dark:hover:text-white"
      >
        <svg
          class="w-3 h-3"
          aria-hidden="true"
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 14 14"
        >
          <path
            stroke="currentColor"
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"></path>
        </svg>
        <span class="sr-only">Close menu</span>
      </button>

      <h2
        class="pt-2 my-2 text-xl font-extrabold tracking-tight text-gray-900 dark:text-white"
      >
        Layout
      </h2>

      <!-- drawer init and toggle -->
      <div class="text-center">
        <button
          id="settings-menu"
          class="text-white bg-white shadow-lg border-4 border-gray-400 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 mb-2 dark:bg-blue-700 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800"
          type="button"
          data-drawer-target="drawer-example"
          data-drawer-show="drawer-example"
          aria-controls="drawer-example"
        >
          <svg
            class="w-6 h-6 text-gray-800 dark:text-white"
            aria-hidden="true"
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 20 20"
          >
            <path
              stroke="currentColor"
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M7.75 4H19M7.75 4a2.25 2.25 0 0 1-4.5 0m4.5 0a2.25 2.25 0 0 0-4.5 0M1 4h2.25m13.5 6H19m-2.25 0a2.25 2.25 0 0 1-4.5 0m4.5 0a2.25 2.25 0 0 0-4.5 0M1 10h11.25m-4.5 6H19M7.75 16a2.25 2.25 0 0 1-4.5 0m4.5 0a2.25 2.25 0 0 0-4.5 0M1 16h2.25"
            ></path>
          </svg>
        </button>
      </div>

      <!-- drawer component -->
      <div
        id="drawer-example"
        class="shadow fixed top-0 left-0 z-40 h-screen p-4 overflow-y-auto transition-transform -translate-x-full bg-white w-80 dark:bg-gray-800"
        tabindex="-1"
        aria-labelledby="drawer-label"
      >
        <h5
          id="drawer-label"
          class="mb-2 text-3xl font-extrabold tracking-tight text-gray-900 dark:text-white"
        >
          Settings
        </h5>
        <button
          type="button"
          data-drawer-hide="drawer-example"
          aria-controls="drawer-example"
          class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 absolute top-2.5 end-2.5 flex items-center justify-center dark:hover:bg-gray-600 dark:hover:text-white"
        >
          <svg
            class="w-3 h-3"
            aria-hidden="true"
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 14 14"
          >
            <path
              stroke="currentColor"
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"></path>
          </svg>
          <span class="sr-only">Close menu</span>
        </button>

        <h2
          class="pt-2 my-2 text-xl font-extrabold tracking-tight text-gray-900 dark:text-white"
        >
          Layout
        </h2>
        <!--Select form that shows up to 4 columns, hidden on small screens -->
        <label for="cols" class="dark:text-gray-100">Column Count:</label>
        <select
          name="cols"
          id="columnSelectBox"
          class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
        >
          <option value="1">1</option>
          <option value="2">2</option>
          <option value="3">3</option>
          <option value="4">4</option>
          <option value="5">5</option>
          <option value="6">6</option>
        </select>

        <script>
          // Get the column value from the URL
          let url = new URL(window.location.href);
          let column = url.searchParams.get("cols");

          //Set current column selection to the value from the URL
          document.getElementById("columnSelectBox").value = column;
        </script>

        <h2
          class="mb-2 text-xl font-extrabold tracking-tight text-gray-900 dark:text-white"
        >
          Video Feeds
        </h2>
        <!--Video links -->
        <form method="POST">
          <div id="videoLinks"></div>
        </form>
        <script>
          //Set #videoLinks innerHTML to array of input boxes with video urls
          const videoLinks = document.querySelector("#videoLinks");

          //innerHTML for an  array of all the stream links inside input boxes
          videoLinks.innerHTML = vidsArray.map((vid) => {
            return `<input class="mb-0 bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" type="text" value=${vid} />`;
          });
          //If value changes for the VIDEO LINKS input, update the video links
          const videoLinksInputs = document.querySelectorAll(".input");
          videoLinksInputs.forEach((input) => {
            input.addEventListener("change", (event) => {
              const value = event.target.value;
              //update the URL params to include the new video links array stream.link
              const vidsArray = document.querySelectorAll(".input");
              const vidsArrayCleaned = [];
              vidsArray.forEach((vid) => {
                if (vid.value) {
                  vidsArrayCleaned.push(vid.value);
                }
              });
              window.location.search = `?cols=${cols}&vids=${vidsArrayCleaned}`;
            });
          });

          //display button
          videoLinks.innerHTML += `<button class="bg-blue-700 py-3 px-5 text-sm font-medium text-center text-white rounded-lg bg-primary-700 sm:w-fit hover:bg-primary-800 focus:ring-4 focus:outline-none focus:ring-primary-300 dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800" onclick="updateVideoLinks()">Update Video Links</button>`;

          //allow user to update the video links with a button or pressing enter
          const updateVideoLinks = () => {
            const vidsArray = document.querySelectorAll(".input");
            const vidsArrayCleaned = [];
            vidsArray.forEach((vid) => {
              if (vid.value) {
                vidsArrayCleaned.push(vid.value);
              }
            });
            window.location.search = `?cols=${cols}&vids=${vidsArrayCleaned}`;
          };

          //update page
          const updatePage = () => {
            const urlParams = new URLSearchParams(window.location.search);
            const cols = urlParams.get("cols");
            const vids = urlParams.get("vids");
            const vidsArray = vids.split(",");
            const videoLinks = document.querySelector("#videoLinks");

            //innerHTML for an  array of all the stream links inside input boxes
            videoLinks.innerHTML = vidsArray.map((vid) => {
              return `<input class="mb-0 bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" type="text" value=${vid} />`;
            });
            //If value changes for the VIDEO LINKS input, update the video links
            const videoLinksInputs = document.querySelectorAll(".input");
            videoLinksInputs.forEach((input) => {
              input.addEventListener("change", (event) => {
                const value = event.target.value;
                //update the URL params to include the new video links array stream.link
                const vidsArray = document.querySelectorAll(".input");
                const vidsArrayCleaned = [];
                vidsArray.forEach((vid) => {
                  if (vid.value) {
                    vidsArrayCleaned.push(vid.value);
                  }
                });
                window.location.search = `?cols=${cols}&vids=${vidsArrayCleaned}`;
              });
            });

            //display button
            videoLinks.innerHTML += `<button class="bg-blue-700 py-3 px-5 text-sm font-medium text-center text-white rounded-lg bg-primary-700 sm:w-fit hover:bg-primary-800 focus:ring-4 focus:outline-none focus:ring-primary-300 dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800" onclick="updateVideoLinks()">Update Video Links</button>`;
          };
        </script>

        <br />
        <h2
          class="mb-2 text-xl font-extrabold tracking-tight text-gray-900 dark:text-white"
        >
          Video Feed IDs
        </h2>
        <p class="mb-6 text-sm text-gray-500 dark:text-gray-100">
          The video ID comes after <code
            ><small>https://www.youtube.com/watch?v=</small></code
          >
        </p>
      </div>

      <h2
        class="mb-2 text-xl font-extrabold tracking-tight text-gray-900 dark:text-white"
      >
        Video Feeds
      </h2>
      <!--Video links -->
      <form method="POST">
        <div id="videoLinks"></div>
      </form>
      <script>
        //Set #videoLinks innerHTML to array of input boxes with video urls
        const videoLinks = document.querySelector("#videoLinks");

        //innerHTML for an  array of all the stream links inside input boxes
        videoLinks.innerHTML = vidsArray.map((vid) => {
          return `<input class="mb-0 bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" type="text" value=${vid} />`;
        });
        //If value changes for the VIDEO LINKS input, update the video links
        const videoLinksInputs = document.querySelectorAll(".input");
        videoLinksInputs.forEach((input) => {
          input.addEventListener("change", (event) => {
            const value = event.target.value;
            //update the URL params to include the new video links array stream.link
            const vidsArray = document.querySelectorAll(".input");
            const vidsArrayCleaned = [];
            vidsArray.forEach((vid) => {
              if (vid.value) {
                vidsArrayCleaned.push(vid.value);
              }
            });
            window.location.search = `?cols=${cols}&vids=${vidsArrayCleaned}`;
          });
        });

        //display button
        videoLinks.innerHTML += `<button class="bg-blue-700 py-3 px-5 text-sm font-medium text-center text-white rounded-lg bg-primary-700 sm:w-fit hover:bg-primary-800 focus:ring-4 focus:outline-none focus:ring-primary-300 dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800" onclick="updateVideoLinks()">Update Video Links</button>`;

        //allow user to update the video links with a button or pressing enter
        const updateVideoLinks = () => {
          const vidsArray = document.querySelectorAll(".input");
          const vidsArrayCleaned = [];
          vidsArray.forEach((vid) => {
            if (vid.value) {
              vidsArrayCleaned.push(vid.value);
            }
          });
          window.location.search = `?cols=${cols}&vids=${vidsArrayCleaned}`;
        };

        //update page
        const updatePage = () => {
          const urlParams = new URLSearchParams(window.location.search);
          const cols = urlParams.get("cols");
          const vids = urlParams.get("vids");
          const vidsArray = vids.split(",");
          const videoLinks = document.querySelector("#videoLinks");

          //innerHTML for an  array of all the stream links inside input boxes
          videoLinks.innerHTML = vidsArray.map((vid) => {
            return `<input class="mb-0 bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" type="text" value=${vid} />`;
          });
          //If value changes for the VIDEO LINKS input, update the video links
          const videoLinksInputs = document.querySelectorAll(".input");
          videoLinksInputs.forEach((input) => {
            input.addEventListener("change", (event) => {
              const value = event.target.value;
              //update the URL params to include the new video links array stream.link
              const vidsArray = document.querySelectorAll(".input");
              const vidsArrayCleaned = [];
              vidsArray.forEach((vid) => {
                if (vid.value) {
                  vidsArrayCleaned.push(vid.value);
                }
              });
              window.location.search = `?cols=${cols}&vids=${vidsArrayCleaned}`;
            });
          });

          //display button
          videoLinks.innerHTML += `<button class="bg-blue-700 py-3 px-5 text-sm font-medium text-center text-white rounded-lg bg-primary-700 sm:w-fit hover:bg-primary-800 focus:ring-4 focus:outline-none focus:ring-primary-300 dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800" onclick="updateVideoLinks()">Update Video Links</button>`;
        };
      </script>

      <br />
      <h2
        class="mb-2 text-xl font-extrabold tracking-tight text-gray-900 dark:text-white"
      >
        Video Feed IDs
      </h2>
      <p class="mb-6 text-sm text-gray-500 dark:text-gray-100">
        The video ID comes after <code
          ><small>https://www.youtube.com/watch?v=</small></code
        >
      </p>
    </div>

    <style>
      #settings-menu {
        position: fixed;
        bottom: 5rem;
        right: 0.75rem;
        z-index: 100;
      }
    </style>

    <Share />
    <div class="custom-columns">
      {
        streams.map((stream) => {
          return (
            <div class="custom-column">
              <div class="youtube-wrapper">
                <iframe
                  class="youtube"
                  width="375"
                  height="300"
                  style="max-width:100%"
                  title="YouTube video player"
                  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
                  allowfullscreen
                />
              </div>
            </div>
          );
        })
      }
    </div>
  </main>
</Layout>

<style>
  #settings-menu {
    position: fixed;
    bottom: 5rem;
    right: 0.75rem;
    z-index: 100;
  }
  body {
    margin: 0;
  }
  .container {
    padding: 12px;
  }
  .custom-columns {
    display: flex;
    flex-wrap: wrap;
  }
  .custom-column {
    --element-width: 50%;
    width: var(--element-width, 100%);
    box-sizing: border-box;
  }
  @media (max-width: 768px) {
    .custom-column {
      width: 100%;
    }
  }
  main {
  }
  h1 {
    font-size: 3rem !important;
    font-weight: 800 !important;
    margin: 0;
  }
  .youtube-wrapper {
    position: relative;
    overflow: hidden;
    width: 100%;
    padding-top: 56.25%;
  }
  .youtube-wrapper iframe {
    position: absolute;
    top: 0;
    left: 0;
    bottom: 0;
    right: 0;
    width: 100%;
    height: 100%;
  }
  p {
    font-size: 16px;
    font-weight: 400;
  }
</style>

<script is:inline>
  //Set default paths
  const defaultColumns = 2;
  const defaultVids = [
    "https://www.youtube.com/watch?v=EwTZ2xpQwpA",
    "https://www.youtube.com/watch?v=9OFpfTd0EIs",
    "https://www.youtube.com/watch?v=1YhR5UfaAzM",
    "https://www.youtube.com/watch?v=xCp8HmQuAqM"
 
  ];

  //Set width prop as URL param '?cols=2'
  const urlParams = new URLSearchParams(window.location.search);
  const cols = urlParams.get("cols");
  const vids = urlParams.get("vids");
  const width = 100 / cols;

  //Set .custom-column width based on the const width property
  const customColumns = document.querySelectorAll(".custom-column");
  customColumns.forEach((column) => {
    column.style.setProperty("--element-width", `${width}%`);
  });

  const defaultVidsCleaned = defaultVids.map((vid) => {
    return vid.replace("https://www.youtube.com/watch?v=", "");
  });

  //if URL params are not set, set them with some defaults
  if (!urlParams.has("cols")) {
    window.location.search = `?cols=${defaultColumns}&vids=${defaultVidsCleaned}`;
  }

  //Set array of video links from URL params
  const vidsArray = vids.split(",");
  console.log(vidsArray);

  //Prepend https://www.youtube.com/embed/ to each video link
  const vidsArrayFull = vidsArray.map((vid) => {
    return `https://www.youtube.com/embed/${vid}?autoplay=1&mute=1`;
  });

  //push vidsArrayFull to the DOM
  const vidsArrayFullPush = vidsArrayFull.map((vid) => {
    return `<iframe
                  class="youtube"
                  width="375"
                  height="300"
                  style="max-width:100%"
                  src=${vid}
                  title="YouTube video player"
                  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
                  allowfullscreen
                />`;
  });

  //Set the iframe src attribute to the new video link
  const youtube = document.querySelectorAll(".youtube");
  youtube.forEach((vid, index) => {
    vid.src = vidsArrayFull[index];
  });

  //If value changes for the COLUMN select box input, update the columns
  const selectBox = document.querySelector("#columnSelectBox");
  selectBox.addEventListener("change", (event) => {
    const value = event.target.value;
    window.location.search = `?cols=${value}&vids=${vidsArray}`;
  });

  //If iframe src is undefined, remove it
  const youtubeIframes = document.querySelectorAll(".youtube");

  youtubeIframes.forEach((iframe) => {
    iframe.addEventListener("error", (event) => {
      event.target.remove();
    });
  });
  //Set #videoLinks innerHTML to array of input boxes with video urls
  const videoLinks = document.querySelector("#videoLinks");

  const videoLinksInputs = document.querySelectorAll(".input");

  videoLinksInputs.forEach((input) => {
    input.addEventListener("input", (event) => {
      const updatedVids = Array.from(videoLinksInputs).map((input) =>
        input.value.replace("https://www.youtube.com/watch?v=", "")
      );

      // Update the iframes dynamically without reloading the page
      const youtubeIframes = document.querySelectorAll(".youtube");
      youtubeIframes.forEach((iframe, index) => {
        //also update the URL params to include the new video links array stream.link
        window.location.search = `?cols=${cols}&vids=${updatedVids}`;
        if (updatedVids[index]) {
          iframe.src = `https://www.youtube.com/embed/${updatedVids[index]}`;
        }
      });
    });
  });
</script>
